[build-system]
requires = [ "setuptools",]
build-backend = "setuptools.build_meta"

[project]
name = "fpx"
version = "0.6.2post1"
description = "Stream archiver/proxy"
classifiers = [ "Development Status :: 3 - Alpha", "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9", "Programming Language :: Python :: 3.10", "Programming Language :: Python :: 3.11",]
requires-python = ">=3.8"
dependencies = [ "aiohttp[speedups]~=3.8.6", "alembic~=1.12.0", "asyncblink==0.3.2", "blinker==1.7.0", "click", "httpx~=0.23.0", "pyjwt", "sanic~=23.12.0", "sanic_ext~=23.12.0", "sqlalchemy~=2.0.22", "typing-extensions", "webargs-sanic~=2.3.5", "websockets>=10.0, <11.0",]
authors = [
    {name = "DataShades", email = "datashades@linkdigital.com.au"},
    {name = "Sergey Motornyuk", email = "sergey.motornyuk@linkdigital.com.au"},
]
maintainers = [
    {name = "DataShades", email = "datashades@linkdigital.com.au"},
]

[project.readme]
file = "README.md"
content-type = "text/markdown"

[project.license]
text = "AGPL"

[project.urls]
Homepage = "https://github.com/DataShades/fpx"

[project.optional-dependencies]
postgresql = [ "psycopg2",]
azure = [ "azure-storage-blob",]
test = [ "aioresponses", "factory_boy", "pytest", "pytest-asyncio", "pytest-factoryboy", "pytest-httpx", "sanic-testing~=23.6.0",]

[project.scripts]
fpx = "fpx.cli:fpx"

[tool.setuptools]
include-package-data = false

[tool.setuptools.package-data]
"*" = [ "alembic.ini", "migrations/**/*",]

[tool.setuptools.packages]
find = {}

[tool.black]
# line-length = 88
# preview = true

[tool.ruff]
target-version = "py38"
select = [
       "B",  # likely bugs and design problems
       "BLE",  # do not catch blind exception
       "C40",  # better list/set/dict comprehensions
       "C90",  # check McCabe complexity
       "COM",  # trailing commas
       "E",  # pycodestyle error
       "W",  # pycodestyle warning
       "F",  # pyflakes
       "G",  # format strings for logging statements
       "N",  # naming conventions
       "PL",  # pylint
       "PT",  # pytest style
       "PIE",  # misc lints
       "Q",  # preferred quoting style
       "RET",  # improvements for return statements
       "RSE",  # improvements for rise statements
       "S",  # security testing
       "SIM",  # simplify code
       "T10",  # debugging statements
       "T20",  # print statements
       "TID",  # tidier imports
       "TRY",  # better exceptions
       "UP",  # upgrade syntax for newer versions of the language
]
ignore = [
       "E712", # comparison to bool: violated by SQLAlchemy filters
       "PT004", # fixture does not return anything, add leading underscore: violated by clean_db
       "PLR0911", # Too many return statements
       "PLR0913", # Too many arguments to function call

       "PLC1901", # simplify comparison to empty string: violated by SQLAlchemy filters
]

[tool.ruff.per-file-ignores]
"fpx/model.py" = [
               "UP006",  # allow Dict
]

"fpx/route/ticket.py" = [
                      "C901",  # complex with-statement
]
"fpx/config.py" = [
                      "S104",  # 0.0.0.0 binding
]

"fpx/tests/*" = [
                         "S",  # security testing
                         "PLR2004" # magic value used in comparison
]

[tool.isort]
known_self = "fpx"
sections = "FUTURE,STDLIB,FIRSTPARTY,THIRDPARTY,SELF,LOCALFOLDER"
profile = "black"

[tool.pytest.ini_options]
testpaths = "fpx/tests"
asyncio_mode = "auto"


[tool.pyright]
pythonVersion = "3.9"
include = ["fpx"]
exclude = [
    "**/tests",
    "**/migrations",
]
strict = []

strictParameterNoneValue = true

# Check the meaning of rules here
# https://github.com/microsoft/pyright/blob/main/docs/configuration.md
reportFunctionMemberAccess = true # non-standard member accesses for functions
reportMissingImports = true
reportMissingModuleSource = true
reportMissingTypeStubs = false
reportImportCycles = true
reportUnusedImport = true
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportDuplicateImport = true
reportOptionalSubscript = true
reportOptionalMemberAccess = true
reportOptionalCall = true
reportOptionalIterable = true
reportOptionalContextManager = true
reportOptionalOperand = true
reportTypedDictNotRequiredAccess = false # Context won't work with this rule
reportConstantRedefinition = true
reportIncompatibleMethodOverride = true
reportIncompatibleVariableOverride = true
reportOverlappingOverload = true
reportUntypedFunctionDecorator = false
reportUnknownParameterType = true
reportUnknownArgumentType = false
reportUnknownLambdaType = false
reportUnknownMemberType = false
reportMissingTypeArgument = true
reportInvalidTypeVarUse = true
reportCallInDefaultInitializer = true
reportUnknownVariableType = true
reportUntypedBaseClass = true
reportUnnecessaryIsInstance = true
reportUnnecessaryCast = true
reportUnnecessaryComparison = true
reportAssertAlwaysTrue = true
reportSelfClsParameterName = true
reportUnusedCallResult = false # allow function calls for side-effect only
useLibraryCodeForTypes = true
reportGeneralTypeIssues = true
reportPropertyTypeMismatch = true
reportWildcardImportFromLibrary = true
reportUntypedClassDecorator = false
reportUntypedNamedTuple = true
reportPrivateUsage = true
reportPrivateImportUsage = true
reportInconsistentConstructor = true
reportMissingSuperCall = false
reportUninitializedInstanceVariable = true
reportInvalidStringEscapeSequence = true
reportMissingParameterType = true
reportImplicitStringConcatenation = false
reportUndefinedVariable = true
reportUnboundVariable = true
reportInvalidStubStatement = true
reportIncompleteStub = true
reportUnsupportedDunderAll = true
reportUnusedCoroutine = true
reportUnnecessaryTypeIgnoreComment = true
reportMatchNotExhaustive = true
